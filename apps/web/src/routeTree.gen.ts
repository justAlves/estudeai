/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermosRouteImport } from './routes/termos'
import { Route as PrivacidadeRouteImport } from './routes/privacidade'
import { Route as ContatoRouteImport } from './routes/contato'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppSimuladosRouteImport } from './routes/_app/simulados'
import { Route as AppRedacoesRouteImport } from './routes/_app/redacoes'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppSimuladoIdRouteImport } from './routes/_app/simulado/$id'

const TermosRoute = TermosRouteImport.update({
  id: '/termos',
  path: '/termos',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacidadeRoute = PrivacidadeRouteImport.update({
  id: '/privacidade',
  path: '/privacidade',
  getParentRoute: () => rootRouteImport,
} as any)
const ContatoRoute = ContatoRouteImport.update({
  id: '/contato',
  path: '/contato',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppSimuladosRoute = AppSimuladosRouteImport.update({
  id: '/simulados',
  path: '/simulados',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppRedacoesRoute = AppRedacoesRouteImport.update({
  id: '/redacoes',
  path: '/redacoes',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppSimuladoIdRoute = AppSimuladoIdRouteImport.update({
  id: '/simulado/$id',
  path: '/simulado/$id',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contato': typeof ContatoRoute
  '/privacidade': typeof PrivacidadeRoute
  '/termos': typeof TermosRoute
  '/dashboard': typeof AppDashboardRoute
  '/redacoes': typeof AppRedacoesRoute
  '/simulados': typeof AppSimuladosRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/simulado/$id': typeof AppSimuladoIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/contato': typeof ContatoRoute
  '/privacidade': typeof PrivacidadeRoute
  '/termos': typeof TermosRoute
  '/dashboard': typeof AppDashboardRoute
  '/redacoes': typeof AppRedacoesRoute
  '/simulados': typeof AppSimuladosRoute
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/simulado/$id': typeof AppSimuladoIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/contato': typeof ContatoRoute
  '/privacidade': typeof PrivacidadeRoute
  '/termos': typeof TermosRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/redacoes': typeof AppRedacoesRoute
  '/_app/simulados': typeof AppSimuladosRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_app/simulado/$id': typeof AppSimuladoIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contato'
    | '/privacidade'
    | '/termos'
    | '/dashboard'
    | '/redacoes'
    | '/simulados'
    | '/login'
    | '/register'
    | '/simulado/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contato'
    | '/privacidade'
    | '/termos'
    | '/dashboard'
    | '/redacoes'
    | '/simulados'
    | '/login'
    | '/register'
    | '/simulado/$id'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/contato'
    | '/privacidade'
    | '/termos'
    | '/_app/dashboard'
    | '/_app/redacoes'
    | '/_app/simulados'
    | '/_auth/login'
    | '/_auth/register'
    | '/_app/simulado/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ContatoRoute: typeof ContatoRoute
  PrivacidadeRoute: typeof PrivacidadeRoute
  TermosRoute: typeof TermosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/termos': {
      id: '/termos'
      path: '/termos'
      fullPath: '/termos'
      preLoaderRoute: typeof TermosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacidade': {
      id: '/privacidade'
      path: '/privacidade'
      fullPath: '/privacidade'
      preLoaderRoute: typeof PrivacidadeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contato': {
      id: '/contato'
      path: '/contato'
      fullPath: '/contato'
      preLoaderRoute: typeof ContatoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/simulados': {
      id: '/_app/simulados'
      path: '/simulados'
      fullPath: '/simulados'
      preLoaderRoute: typeof AppSimuladosRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/redacoes': {
      id: '/_app/redacoes'
      path: '/redacoes'
      fullPath: '/redacoes'
      preLoaderRoute: typeof AppRedacoesRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/simulado/$id': {
      id: '/_app/simulado/$id'
      path: '/simulado/$id'
      fullPath: '/simulado/$id'
      preLoaderRoute: typeof AppSimuladoIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppRedacoesRoute: typeof AppRedacoesRoute
  AppSimuladosRoute: typeof AppSimuladosRoute
  AppSimuladoIdRoute: typeof AppSimuladoIdRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppRedacoesRoute: AppRedacoesRoute,
  AppSimuladosRoute: AppSimuladosRoute,
  AppSimuladoIdRoute: AppSimuladoIdRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ContatoRoute: ContatoRoute,
  PrivacidadeRoute: PrivacidadeRoute,
  TermosRoute: TermosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
